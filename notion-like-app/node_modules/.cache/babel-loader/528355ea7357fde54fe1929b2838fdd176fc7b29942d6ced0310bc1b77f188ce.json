{"ast":null,"code":"var _jsxFileName = \"/Users/nathantrung/Desktop/Web App/notion-like-app/src/pages/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const fetchChats = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/chat');\n      setChats(response.data);\n    } catch (err) {\n      setError('Unable to fetch chat history.');\n    }\n  };\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post('http://localhost:3000/api/chat');\n      setCurrentChatId(response.data.id);\n      setMessages([]);\n    } catch (err) {\n      setError('Unable to start a new chat.');\n    }\n  };\n  const sendMessage = async () => {\n    if (!input.trim() || !currentChatId) return;\n    const userMessage = {\n      role: 'user',\n      content: input\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setLoading(true);\n    try {\n      await axios.post(`http://localhost:3000/api/chat/${currentChatId}/message`, userMessage);\n      const response = await axios.post(`http://localhost:3000/api/chat/${currentChatId}/message`, userMessage);\n      setMessages(prev => [...prev, response.data]);\n    } catch (err) {\n      setError('Unable to send message.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchChats();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI ChatBot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startNewChat,\n      children: \"Start New Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), chats.map(chat => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          setCurrentChatId(chat.id);\n          setMessages(chat.messages);\n        },\n        children: [\"Chat \", chat.id]\n      }, chat.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.role === 'user' ? 'user-msg' : 'bot-msg',\n          children: msg.content\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: loading,\n        children: loading ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"h21EmKhPDONSwJKG2H4pcJ3dBF0=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ChatBot","_s","chats","setChats","currentChatId","setCurrentChatId","messages","setMessages","input","setInput","error","setError","loading","setLoading","fetchChats","response","get","data","err","startNewChat","post","id","sendMessage","trim","userMessage","role","content","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","chat","msg","idx","type","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/nathantrung/Desktop/Web App/notion-like-app/src/pages/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ChatBot = () => {\n  const [chats, setChats] = useState([]);\n  const [currentChatId, setCurrentChatId] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const fetchChats = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/chat');\n      setChats(response.data);\n    } catch (err) {\n      setError('Unable to fetch chat history.');\n    }\n  };\n\n  const startNewChat = async () => {\n    try {\n      const response = await axios.post('http://localhost:3000/api/chat');\n      setCurrentChatId(response.data.id);\n      setMessages([]);\n    } catch (err) {\n      setError('Unable to start a new chat.');\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim() || !currentChatId) return;\n\n    const userMessage = { role: 'user', content: input };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setLoading(true);\n\n    try {\n      await axios.post(\n        `http://localhost:3000/api/chat/${currentChatId}/message`,\n        userMessage\n      );\n\n      const response = await axios.post(\n        `http://localhost:3000/api/chat/${currentChatId}/message`,\n        userMessage\n      );\n      setMessages((prev) => [...prev, response.data]);\n    } catch (err) {\n      setError('Unable to send message.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChats();\n  }, []);\n\n  return (\n    <div className=\"chat-container\">\n      <h1>AI ChatBot</h1>\n      <button onClick={startNewChat}>Start New Chat</button>\n      <div className=\"chat-history\">\n        <h2>Chat History</h2>\n        {chats.map((chat) => (\n          <div\n            key={chat.id}\n            onClick={() => {\n              setCurrentChatId(chat.id);\n              setMessages(chat.messages);\n            }}\n          >\n            Chat {chat.id}\n          </div>\n        ))}\n      </div>\n      <div className=\"chat-box\">\n        <div className=\"messages\">\n          {messages.map((msg, idx) => (\n            <div key={idx} className={msg.role === 'user' ? 'user-msg' : 'bot-msg'}>\n              {msg.content}\n            </div>\n          ))}\n        </div>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage} disabled={loading}>\n          {loading ? 'Sending...' : 'Send'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}