{"ast":null,"code":"const express = require('express');\nconst axios = require('axios');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(bodyParser.json());\n\n// Chat History (Stored Temporarily in Memory)\nconst chats = {};\n\n// HuggingFace API URL and Model (e.g., GPT-J)\nconst HF_API_URL = 'https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-1.3B';\nconst HF_API_KEY = 'YOUR_HUGGINGFACE_API_KEY'; // Get a free API key from HuggingFace\n\n// Get chat history\napp.get('/api/chat', (req, res) => {\n  res.status(200).json(Object.values(chats));\n});\n\n// Start a new chat\napp.post('/api/chat', (req, res) => {\n  const chatId = Date.now().toString();\n  chats[chatId] = {\n    id: chatId,\n    messages: [],\n    createdAt: new Date()\n  };\n  res.status(201).json(chats[chatId]);\n});\n\n// Send a message\napp.post('/api/chat/:chatId/message', async (req, res) => {\n  const {\n    chatId\n  } = req.params;\n  const {\n    role,\n    content\n  } = req.body;\n  if (!chats[chatId]) {\n    return res.status(404).json({\n      error: 'Chat not found'\n    });\n  }\n\n  // Add user's message to chat history\n  chats[chatId].messages.push({\n    role,\n    content\n  });\n  if (role === 'user') {\n    try {\n      // Prepare the conversation prompt\n      const messages = chats[chatId].messages.map(msg => `${msg.role}: ${msg.content}`).join('\\n');\n      const prompt = `${messages}\\nassistant:`;\n\n      // Call HuggingFace API\n      const response = await axios.post(HF_API_URL, {\n        inputs: prompt\n      }, {\n        headers: {\n          Authorization: `Bearer ${HF_API_KEY}`\n        }\n      });\n      const botMessage = {\n        role: 'assistant',\n        content: response.data.generated_text.trim()\n      };\n\n      // Add bot's response to chat history\n      chats[chatId].messages.push(botMessage);\n      return res.status(200).json(botMessage);\n    } catch (error) {\n      console.error('HuggingFace Error:', error.message);\n      return res.status(500).json({\n        error: 'Error communicating with HuggingFace API'\n      });\n    }\n  }\n  res.status(200).json({\n    message: 'Message received'\n  });\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","axios","bodyParser","app","PORT","use","json","chats","HF_API_URL","HF_API_KEY","get","req","res","status","Object","values","post","chatId","Date","now","toString","id","messages","createdAt","params","role","content","body","error","push","map","msg","join","prompt","response","inputs","headers","Authorization","botMessage","data","generated_text","trim","console","message","listen","log"],"sources":["/Users/nathantrung/Desktop/Web App/notion-like-app/src/pages/ChatBot.js"],"sourcesContent":["const express = require('express');\nconst axios = require('axios');\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst PORT = 3000;\n\n// Middleware\napp.use(bodyParser.json());\n\n// Chat History (Stored Temporarily in Memory)\nconst chats = {};\n\n// HuggingFace API URL and Model (e.g., GPT-J)\nconst HF_API_URL = 'https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-1.3B';\nconst HF_API_KEY = 'YOUR_HUGGINGFACE_API_KEY'; // Get a free API key from HuggingFace\n\n// Get chat history\napp.get('/api/chat', (req, res) => {\n  res.status(200).json(Object.values(chats));\n});\n\n// Start a new chat\napp.post('/api/chat', (req, res) => {\n  const chatId = Date.now().toString();\n  chats[chatId] = { id: chatId, messages: [], createdAt: new Date() };\n  res.status(201).json(chats[chatId]);\n});\n\n// Send a message\napp.post('/api/chat/:chatId/message', async (req, res) => {\n  const { chatId } = req.params;\n  const { role, content } = req.body;\n\n  if (!chats[chatId]) {\n    return res.status(404).json({ error: 'Chat not found' });\n  }\n\n  // Add user's message to chat history\n  chats[chatId].messages.push({ role, content });\n\n  if (role === 'user') {\n    try {\n      // Prepare the conversation prompt\n      const messages = chats[chatId].messages.map((msg) => `${msg.role}: ${msg.content}`).join('\\n');\n      const prompt = `${messages}\\nassistant:`;\n\n      // Call HuggingFace API\n      const response = await axios.post(\n        HF_API_URL,\n        { inputs: prompt },\n        { headers: { Authorization: `Bearer ${HF_API_KEY}` } }\n      );\n\n      const botMessage = {\n        role: 'assistant',\n        content: response.data.generated_text.trim(),\n      };\n\n      // Add bot's response to chat history\n      chats[chatId].messages.push(botMessage);\n\n      return res.status(200).json(botMessage);\n    } catch (error) {\n      console.error('HuggingFace Error:', error.message);\n      return res.status(500).json({ error: 'Error communicating with HuggingFace API' });\n    }\n  }\n\n  res.status(200).json({ message: 'Message received' });\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}